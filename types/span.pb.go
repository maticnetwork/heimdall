// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdall/types/span.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Span struct {
	ID                uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id" yaml:"id"`
	StartBlock        uint64       `protobuf:"varint,2,opt,name=start_block,json=startBlock,proto3" json:"start_block" yaml:"start_block"`
	EndBlock          uint64       `protobuf:"varint,3,opt,name=end_block,json=endBlock,proto3" json:"end_block" yaml:"end_block"`
	ValidatorSet      ValidatorSet `protobuf:"bytes,4,opt,name=validator_set,json=validatorSet,proto3" json:"validator_set" yaml:"validator_set"`
	SelectedProducers []Validator  `protobuf:"bytes,5,rep,name=selected_producers,json=selectedProducers,proto3" json:"selected_producers" yaml:"selected_producers"`
	ChainId           string       `protobuf:"bytes,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id" yaml:"chain_id"`
}

func (m *Span) Reset()         { *m = Span{} }
func (m *Span) String() string { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()    {}
func (*Span) Descriptor() ([]byte, []int) {
	return fileDescriptor_629c95d56d8abc67, []int{0}
}
func (m *Span) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Span) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Span.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Span) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span.Merge(m, src)
}
func (m *Span) XXX_Size() int {
	return m.Size()
}
func (m *Span) XXX_DiscardUnknown() {
	xxx_messageInfo_Span.DiscardUnknown(m)
}

var xxx_messageInfo_Span proto.InternalMessageInfo

func (m *Span) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Span) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *Span) GetEndBlock() uint64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

func (m *Span) GetValidatorSet() ValidatorSet {
	if m != nil {
		return m.ValidatorSet
	}
	return ValidatorSet{}
}

func (m *Span) GetSelectedProducers() []Validator {
	if m != nil {
		return m.SelectedProducers
	}
	return nil
}

func (m *Span) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func init() {
	proto.RegisterType((*Span)(nil), "heimdall.types.Span")
}

func init() { proto.RegisterFile("heimdall/types/span.proto", fileDescriptor_629c95d56d8abc67) }

var fileDescriptor_629c95d56d8abc67 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x33, 0xd9, 0xb5, 0x76, 0x67, 0xfd, 0x3b, 0xf4, 0x90, 0x14, 0xc9, 0xc4, 0x01, 0x25,
	0x1e, 0x4c, 0xa0, 0x1e, 0x84, 0x1e, 0x44, 0x82, 0x08, 0xbd, 0x49, 0x0a, 0x1e, 0xbc, 0x84, 0xd9,
	0xcc, 0xb0, 0x3b, 0x34, 0xc9, 0x84, 0x64, 0x5a, 0xe9, 0xd1, 0x6f, 0xe0, 0xc7, 0xea, 0xb1, 0x47,
	0x4f, 0x83, 0x64, 0x6f, 0xf1, 0x96, 0x4f, 0x20, 0x9b, 0x6c, 0xd6, 0x8d, 0xda, 0xdb, 0xbc, 0xbf,
	0xe7, 0x7d, 0x9e, 0x97, 0x79, 0x79, 0xa1, 0xbd, 0xe2, 0x22, 0x63, 0x34, 0x4d, 0x03, 0x75, 0x5d,
	0xf0, 0x2a, 0xa8, 0x0a, 0x9a, 0xfb, 0x45, 0x29, 0x95, 0x44, 0x8f, 0x06, 0xc9, 0xef, 0xa4, 0xe3,
	0xa3, 0xa5, 0x5c, 0xca, 0x4e, 0x0a, 0x36, 0xaf, 0xbe, 0xeb, 0xd8, 0xf9, 0x2b, 0xe0, 0x8a, 0xa6,
	0x82, 0x51, 0x25, 0xcb, 0x5e, 0x27, 0xbf, 0x26, 0x70, 0x7a, 0x5e, 0xd0, 0x1c, 0xbd, 0x82, 0xa6,
	0x60, 0x16, 0x70, 0x81, 0x37, 0x0d, 0xed, 0x5a, 0x63, 0xf3, 0xec, 0x43, 0xa3, 0xb1, 0x29, 0x58,
	0xab, 0xf1, 0xec, 0x9a, 0x66, 0xe9, 0x29, 0x11, 0x8c, 0x44, 0xa6, 0x60, 0xe8, 0x23, 0x9c, 0x57,
	0x8a, 0x96, 0x2a, 0x5e, 0xa4, 0x32, 0xb9, 0xb0, 0xcc, 0xce, 0xf3, 0xa2, 0xd1, 0x78, 0x1f, 0xb7,
	0x1a, 0xa3, 0xde, 0xb6, 0x07, 0x49, 0x04, 0xbb, 0x2a, 0xdc, 0x14, 0xe8, 0x1d, 0x9c, 0xf1, 0x9c,
	0x6d, 0x53, 0x26, 0x5d, 0xca, 0xf3, 0x46, 0xe3, 0x3f, 0xb0, 0xd5, 0xf8, 0x49, 0x9f, 0xb1, 0x43,
	0x24, 0x3a, 0xe4, 0x39, 0xeb, 0xfd, 0x05, 0x7c, 0xb8, 0xfb, 0x4e, 0x5c, 0x71, 0x65, 0x4d, 0x5d,
	0xe0, 0xcd, 0x4f, 0x9e, 0xf9, 0xe3, 0xcd, 0xf8, 0x9f, 0x87, 0xa6, 0x73, 0xae, 0xc2, 0xd7, 0x37,
	0x1a, 0x1b, 0x8d, 0xc6, 0x63, 0x6b, 0xab, 0xf1, 0x51, 0x3f, 0x69, 0x84, 0x49, 0xf4, 0xe0, 0x6a,
	0xcf, 0x8c, 0xbe, 0x01, 0x88, 0x2a, 0x9e, 0xf2, 0x44, 0x71, 0x16, 0x17, 0xa5, 0x64, 0x97, 0x09,
	0x2f, 0x2b, 0xeb, 0x9e, 0x3b, 0xf1, 0xe6, 0x27, 0xf6, 0x9d, 0x73, 0xc3, 0xb7, 0xdb, 0xa1, 0xff,
	0x31, 0xb7, 0x1a, 0xdb, 0xdb, 0x3d, 0xfd, 0xa3, 0x91, 0xe8, 0xe9, 0x00, 0x3f, 0x0d, 0x0c, 0x9d,
	0xc2, 0xc3, 0x64, 0x45, 0x45, 0x1e, 0x0b, 0x66, 0x1d, 0xb8, 0xc0, 0x9b, 0x85, 0xb8, 0xd1, 0x78,
	0xc7, 0x5a, 0x8d, 0x1f, 0xf7, 0x79, 0x03, 0x21, 0xd1, 0xfd, 0xee, 0x79, 0xc6, 0xc2, 0xf7, 0x37,
	0xb5, 0x03, 0x6e, 0x6b, 0x07, 0xfc, 0xac, 0x1d, 0xf0, 0x7d, 0xed, 0x18, 0xb7, 0x6b, 0xc7, 0xf8,
	0xb1, 0x76, 0x8c, 0x2f, 0x2f, 0x97, 0x42, 0xad, 0x2e, 0x17, 0x7e, 0x22, 0xb3, 0x20, 0xa3, 0x4a,
	0x24, 0x39, 0x57, 0x5f, 0x65, 0x79, 0x11, 0x8c, 0xef, 0x67, 0x71, 0xd0, 0x9d, 0xcd, 0x9b, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x4d, 0x38, 0xef, 0x99, 0x02, 0x00, 0x00,
}

func (m *Span) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Span) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintSpan(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SelectedProducers) > 0 {
		for iNdEx := len(m.SelectedProducers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SelectedProducers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.ValidatorSet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSpan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.EndBlock != 0 {
		i = encodeVarintSpan(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.StartBlock != 0 {
		i = encodeVarintSpan(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintSpan(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpan(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Span) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSpan(uint64(m.ID))
	}
	if m.StartBlock != 0 {
		n += 1 + sovSpan(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovSpan(uint64(m.EndBlock))
	}
	l = m.ValidatorSet.Size()
	n += 1 + l + sovSpan(uint64(l))
	if len(m.SelectedProducers) > 0 {
		for _, e := range m.SelectedProducers {
			l = e.Size()
			n += 1 + l + sovSpan(uint64(l))
		}
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	return n
}

func sovSpan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpan(x uint64) (n int) {
	return sovSpan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Span) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Span: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Span: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedProducers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectedProducers = append(m.SelectedProducers, Validator{})
			if err := m.SelectedProducers[len(m.SelectedProducers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpan = fmt.Errorf("proto: unexpected end of group")
)
