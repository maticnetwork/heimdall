// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdall/base/v1beta1/headers.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Checkpoint struct {
	Proposer   string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	StartBlock uint64 `protobuf:"varint,2,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty" yaml:"start_block"`
	EndBlock   uint64 `protobuf:"varint,3,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty" yaml:"end_block"`
	RootHash   string `protobuf:"bytes,4,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty" yaml:"root_hash"`
	BorChainID string `protobuf:"bytes,5,opt,name=BorChainID,proto3" json:"BorChainID,omitempty" yaml:"bor_chain_ID"`
	TimeStamp  uint64 `protobuf:"varint,6,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty" yaml:"time_stamp"`
}

func (m *Checkpoint) Reset()      { *m = Checkpoint{} }
func (*Checkpoint) ProtoMessage() {}
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_8563020106cb712f, []int{0}
}
func (m *Checkpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Checkpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Checkpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Checkpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Checkpoint.Merge(m, src)
}
func (m *Checkpoint) XXX_Size() int {
	return m.Size()
}
func (m *Checkpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Checkpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Checkpoint proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Checkpoint)(nil), "heimdall.types.Checkpoint")
}

func init() {
	proto.RegisterFile("heimdall/base/v1beta1/headers.proto", fileDescriptor_8563020106cb712f)
}

var fileDescriptor_8563020106cb712f = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xb1, 0x4a, 0xf3, 0x50,
	0x18, 0x86, 0x93, 0xfe, 0xfd, 0x4b, 0x7a, 0x7e, 0xf8, 0xd1, 0x58, 0x35, 0x74, 0x48, 0x4a, 0x04,
	0xe9, 0xd4, 0x50, 0x14, 0x0a, 0x9d, 0x24, 0xed, 0x60, 0xd7, 0xb8, 0xb9, 0x84, 0x93, 0xe4, 0xd0,
	0x13, 0x9a, 0xe4, 0x0b, 0xe7, 0x1c, 0x95, 0xde, 0x81, 0xa3, 0xa3, 0x63, 0x2f, 0xc5, 0xd1, 0xb1,
	0xa3, 0x53, 0x90, 0xf6, 0x0e, 0x72, 0x05, 0x92, 0x13, 0x8d, 0xdd, 0xbe, 0x97, 0xe7, 0x7d, 0xe0,
	0x83, 0x17, 0x5d, 0x50, 0x12, 0xa7, 0x11, 0x4e, 0x12, 0x27, 0xc0, 0x9c, 0x38, 0x8f, 0xe3, 0x80,
	0x08, 0x3c, 0x76, 0x28, 0xc1, 0x11, 0x61, 0x7c, 0x94, 0x33, 0x10, 0xa0, 0xff, 0xff, 0x29, 0x8d,
	0xc4, 0x3a, 0x27, 0xbc, 0xdf, 0x5b, 0xc2, 0x12, 0x24, 0x72, 0xaa, 0xab, 0x6e, 0xd9, 0x6f, 0x2d,
	0x84, 0x66, 0x94, 0x84, 0xab, 0x1c, 0xe2, 0x4c, 0xe8, 0x7d, 0xa4, 0xe5, 0x0c, 0x72, 0xe0, 0x84,
	0x19, 0xea, 0x40, 0x1d, 0x76, 0xbd, 0x26, 0xeb, 0x13, 0xf4, 0x8f, 0x0b, 0xcc, 0x84, 0x1f, 0x24,
	0x10, 0xae, 0x8c, 0xd6, 0x40, 0x1d, 0xb6, 0xdd, 0xb3, 0xb2, 0xb0, 0xf4, 0x35, 0x4e, 0x93, 0xa9,
	0x7d, 0x00, 0x6d, 0x0f, 0xc9, 0xe4, 0x56, 0x41, 0x1f, 0xa3, 0x2e, 0xc9, 0xa2, 0x6f, 0xed, 0x8f,
	0xd4, 0x7a, 0x65, 0x61, 0x1d, 0xd5, 0x5a, 0x83, 0x6c, 0x4f, 0x23, 0x59, 0xd4, 0x28, 0x0c, 0x40,
	0xf8, 0x14, 0x73, 0x6a, 0xb4, 0xab, 0x47, 0x0e, 0x95, 0x06, 0xd9, 0x9e, 0x56, 0xdd, 0xb7, 0x98,
	0x53, 0x7d, 0x82, 0x90, 0x0b, 0x6c, 0x46, 0x71, 0x9c, 0x2d, 0xe6, 0xc6, 0x5f, 0xe9, 0x9c, 0x97,
	0x85, 0x75, 0x52, 0x3b, 0x01, 0x30, 0x3f, 0xac, 0xa0, 0xbf, 0x98, 0xdb, 0xde, 0x41, 0x55, 0xbf,
	0x46, 0x48, 0xc4, 0x29, 0xf1, 0xb9, 0xc0, 0x69, 0x6e, 0x74, 0xe4, 0x7f, 0xa7, 0x65, 0x61, 0x1d,
	0xd7, 0xe2, 0x2f, 0xb3, 0xbd, 0x6e, 0x15, 0xee, 0xaa, 0x7b, 0xaa, 0x3d, 0x6f, 0x2c, 0xe5, 0x75,
	0x63, 0x29, 0xee, 0xcd, 0xfb, 0xce, 0x54, 0xb7, 0x3b, 0x53, 0xfd, 0xdc, 0x99, 0xea, 0xcb, 0xde,
	0x54, 0xb6, 0x7b, 0x53, 0xf9, 0xd8, 0x9b, 0xca, 0xfd, 0xe5, 0x32, 0x16, 0xf4, 0x21, 0x18, 0x85,
	0x90, 0x3a, 0x29, 0x16, 0x71, 0x98, 0x11, 0xf1, 0x04, 0x6c, 0xe5, 0x34, 0xfb, 0xc9, 0x69, 0x82,
	0x8e, 0xdc, 0xe2, 0xea, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x79, 0x87, 0x01, 0x50, 0xd8, 0x01, 0x00,
	0x00,
}

func (m *Checkpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Checkpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Checkpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeStamp != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.TimeStamp))
		i--
		dAtA[i] = 0x30
	}
	if len(m.BorChainID) > 0 {
		i -= len(m.BorChainID)
		copy(dAtA[i:], m.BorChainID)
		i = encodeVarintHeaders(dAtA, i, uint64(len(m.BorChainID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintHeaders(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndBlock != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.StartBlock != 0 {
		i = encodeVarintHeaders(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintHeaders(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHeaders(dAtA []byte, offset int, v uint64) int {
	offset -= sovHeaders(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Checkpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovHeaders(uint64(l))
	}
	if m.StartBlock != 0 {
		n += 1 + sovHeaders(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovHeaders(uint64(m.EndBlock))
	}
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovHeaders(uint64(l))
	}
	l = len(m.BorChainID)
	if l > 0 {
		n += 1 + l + sovHeaders(uint64(l))
	}
	if m.TimeStamp != 0 {
		n += 1 + sovHeaders(uint64(m.TimeStamp))
	}
	return n
}

func sovHeaders(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHeaders(x uint64) (n int) {
	return sovHeaders(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Checkpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Checkpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Checkpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeaders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeaders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			m.TimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeaders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeaders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHeaders(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHeaders
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeaders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHeaders
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHeaders
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHeaders
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHeaders        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHeaders          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHeaders = fmt.Errorf("proto: unexpected end of group")
)
