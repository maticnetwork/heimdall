// +build extensive_tests

// only built if manually enforced (via the build tag above)
package proto3

import (
	"testing"

	"github.com/golang/protobuf/proto"
	"github.com/stretchr/testify/assert"

	"github.com/tendermint/go-amino"
	p3 "github.com/tendermint/go-amino/tests/proto3/proto"
)

// This file checks basic proto3 compatibility by checking encoding of some test-vectors generated by using protoc.

func TestFixed32Roundtrip(t *testing.T) {
	// amino fixed32 (int32) <-> protbuf fixed32 (uint32)
	cdc := amino.NewCodec()
	type testi32 struct {
		Int32 int32 `binary:"fixed32"`
	}
	ab, err := cdc.MarshalBinaryBare(testi32{Int32: 150})
	assert.NoError(t, err, "unexpected error")

	pb, err := proto.Marshal(&p3.TestInt32Fixed{Fixed32: 150})
	assert.NoError(t, err, "unexpected error")

	assert.Equal(t, pb, ab, "fixed32 (int32) encoding doesn't match")

	// unmarshal (from amino to proto and vice versa)
	var att testi32
	var pt p3.Test32
	err = proto.Unmarshal(ab, &pt)
	assert.NoError(t, err, "unexpected error")

	err = cdc.UnmarshalBinaryBare(pb, &att)
	assert.NoError(t, err, "unexpected error")

	assert.Equal(t, uint32(att.Int32), pt.Foo)
}

func TestVarintZigzagRoundtrip(t *testing.T) {
	// amino varint (int) <-> protobuf zigzag32 (int32)
	cdc := amino.NewCodec()
	type testInt32Varint struct {
		Int32 int `binary:"varint"`
	}
	varint := testInt32Varint{Int32: 6000000}
	ab, err := cdc.MarshalBinaryBare(varint)
	assert.NoError(t, err, "unexpected error")
	pb, err := proto.Marshal(&p3.TestInt32Varint{Int32: 6000000})
	assert.NoError(t, err, "unexpected error")
	assert.Equal(t, pb, ab, "varint encoding doesn't match")

	var amToP3 p3.TestInt32Varint
	var p3ToAm testInt32Varint
	err = proto.Unmarshal(ab, &amToP3)
	assert.NoError(t, err, "unexpected error")

	err = cdc.UnmarshalBinaryBare(pb, &p3ToAm)
	assert.NoError(t, err, "unexpected error")

	assert.EqualValues(t, varint.Int32, amToP3.Int32)
}

func TestMixedFixedVarintRoudtrip(t *testing.T) {
	cdc := amino.NewCodec()
	type test32 struct {
		Foo int32 `binary:"fixed32"`
		Bar int   `binary:"varint"`
	}
	ab, err := cdc.MarshalBinaryBare(test32{Foo: 150, Bar: 150})
	assert.NoError(t, err, "unexpected error")
	pb, err := proto.Marshal(&p3.Test32{Foo: 150, Bar: 150})
	assert.NoError(t, err, "unexpected error")
	assert.Equal(t, pb, ab, "mixed fixed32/varint encoding doesn't match")

	var amToP3 p3.Test32
	var p3ToAm test32
	err = proto.Unmarshal(ab, &amToP3)
	assert.NoError(t, err, "unexpected error")

	err = cdc.UnmarshalBinaryBare(pb, &p3ToAm)
	assert.NoError(t, err, "unexpected error")

	assert.EqualValues(t, p3ToAm.Foo, amToP3.Foo)

	// same as above but with skipped fields:
	ab, err = cdc.MarshalBinaryBare(test32{})
	assert.NoError(t, err, "unexpected error")
	pb, err = proto.Marshal(&p3.Test32{})
	assert.NoError(t, err, "unexpected error")
	assert.Equal(t, pb, ab, "mixed fixed32/varint encoding doesn't match")

	err = proto.Unmarshal(ab, &amToP3)
	assert.NoError(t, err, "unexpected error")

	err = cdc.UnmarshalBinaryBare(pb, &p3ToAm)
	assert.NoError(t, err, "unexpected error")

	assert.EqualValues(t, p3ToAm.Foo, amToP3.Foo)
	assert.EqualValues(t, p3ToAm.Bar, amToP3.Bar)
}

func TestFixedU64Roundtrip(t *testing.T) {
	cdc := amino.NewCodec()

	type testFixed64Uint struct {
		Int64 uint64 `binary:"fixed64"`
	}

	pvint64 := p3.TestFixedInt64{Int64: 150}
	avint64 := testFixed64Uint{Int64: 150}
	ab, err := cdc.MarshalBinaryBare(avint64)
	assert.NoError(t, err, "unexpected error")

	pb, err := proto.Marshal(&pvint64)
	assert.NoError(t, err, "unexpected error")

	assert.Equal(t, pb, ab, "fixed64 encoding doesn't match")

	var amToP3 p3.TestFixedInt64
	var p3ToAm testFixed64Uint
	err = proto.Unmarshal(ab, &amToP3)
	assert.NoError(t, err, "unexpected error")

	err = cdc.UnmarshalBinaryBare(pb, &p3ToAm)
	assert.NoError(t, err, "unexpected error")

	assert.EqualValues(t, p3ToAm, amToP3)
}

func TestProto3CompatPtrsRoundtrip(t *testing.T) {
	cdc := amino.NewCodec()
	s := p3.SomeStruct{}

	ab, err := cdc.MarshalBinaryBare(s)
	assert.NoError(t, err)

	pb, err := proto.Marshal(&s)
	assert.NoError(t, err)
	assert.Equal(t, ab, pb)
	assert.Zero(t, len(ab), "expected an empty encoding for a nil pointer")
	t.Log(ab)

	var amToP3 p3.SomeStruct
	var p3ToAm p3.SomeStruct
	err = proto.Unmarshal(ab, &amToP3)
	assert.NoError(t, err, "unexpected error")

	err = cdc.UnmarshalBinaryBare(pb, &p3ToAm)
	assert.NoError(t, err, "unexpected error")

	assert.EqualValues(t, p3ToAm, amToP3)


	s2 := p3.SomeStruct{Emb: &p3.EmbeddedStruct{}}

	ab, err = cdc.MarshalBinaryBare(s2)
	assert.NoError(t, err)

	pb, err = proto.Marshal(&s2)
	assert.NoError(t, err)
	assert.Equal(t, ab, pb)

	err = proto.Unmarshal(ab, &amToP3)
	assert.NoError(t, err, "unexpected error")

	err = cdc.UnmarshalBinaryBare(pb, &p3ToAm)
	assert.NoError(t, err, "unexpected error")

	assert.EqualValues(t, p3ToAm, amToP3)


	assert.NotZero(t, len(ab), "expected a non-empty encoding for a non-nil pointer to an empty struct")
	t.Log(ab)

}
