// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: checkpoint/v1beta/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/maticnetwork/heimdall/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryAckCountRequest struct {
}

func (m *QueryAckCountRequest) Reset()         { *m = QueryAckCountRequest{} }
func (m *QueryAckCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAckCountRequest) ProtoMessage()    {}
func (*QueryAckCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{2}
}
func (m *QueryAckCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAckCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAckCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAckCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAckCountRequest.Merge(m, src)
}
func (m *QueryAckCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAckCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAckCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAckCountRequest proto.InternalMessageInfo

type QueryAckCountResponse struct {
	AckCount uint64 `protobuf:"varint,1,opt,name=ack_count,json=ackCount,proto3" json:"ack_count,omitempty"`
}

func (m *QueryAckCountResponse) Reset()         { *m = QueryAckCountResponse{} }
func (m *QueryAckCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAckCountResponse) ProtoMessage()    {}
func (*QueryAckCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{3}
}
func (m *QueryAckCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAckCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAckCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAckCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAckCountResponse.Merge(m, src)
}
func (m *QueryAckCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAckCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAckCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAckCountResponse proto.InternalMessageInfo

func (m *QueryAckCountResponse) GetAckCount() uint64 {
	if m != nil {
		return m.AckCount
	}
	return 0
}

type QueryCheckpointRequest struct {
	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *QueryCheckpointRequest) Reset()         { *m = QueryCheckpointRequest{} }
func (m *QueryCheckpointRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointRequest) ProtoMessage()    {}
func (*QueryCheckpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{4}
}
func (m *QueryCheckpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointRequest.Merge(m, src)
}
func (m *QueryCheckpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointRequest proto.InternalMessageInfo

func (m *QueryCheckpointRequest) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type QueryCheckpointResponse struct {
	AckCount   uint64            `protobuf:"varint,1,opt,name=ack_count,json=ackCount,proto3" json:"ack_count,omitempty"`
	Checkpoint *types.Checkpoint `protobuf:"bytes,2,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
}

func (m *QueryCheckpointResponse) Reset()         { *m = QueryCheckpointResponse{} }
func (m *QueryCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointResponse) ProtoMessage()    {}
func (*QueryCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{5}
}
func (m *QueryCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointResponse.Merge(m, src)
}
func (m *QueryCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointResponse proto.InternalMessageInfo

func (m *QueryCheckpointResponse) GetAckCount() uint64 {
	if m != nil {
		return m.AckCount
	}
	return 0
}

func (m *QueryCheckpointResponse) GetCheckpoint() *types.Checkpoint {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

type QueryCheckpointBufferRequest struct {
}

func (m *QueryCheckpointBufferRequest) Reset()         { *m = QueryCheckpointBufferRequest{} }
func (m *QueryCheckpointBufferRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointBufferRequest) ProtoMessage()    {}
func (*QueryCheckpointBufferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{6}
}
func (m *QueryCheckpointBufferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointBufferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointBufferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointBufferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointBufferRequest.Merge(m, src)
}
func (m *QueryCheckpointBufferRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointBufferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointBufferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointBufferRequest proto.InternalMessageInfo

type QueryCheckpointBufferResponse struct {
	CheckpointBuffer *types.Checkpoint `protobuf:"bytes,1,opt,name=checkpoint_buffer,json=checkpointBuffer,proto3" json:"checkpoint_buffer,omitempty"`
}

func (m *QueryCheckpointBufferResponse) Reset()         { *m = QueryCheckpointBufferResponse{} }
func (m *QueryCheckpointBufferResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointBufferResponse) ProtoMessage()    {}
func (*QueryCheckpointBufferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{7}
}
func (m *QueryCheckpointBufferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointBufferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointBufferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointBufferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointBufferResponse.Merge(m, src)
}
func (m *QueryCheckpointBufferResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointBufferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointBufferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointBufferResponse proto.InternalMessageInfo

func (m *QueryCheckpointBufferResponse) GetCheckpointBuffer() *types.Checkpoint {
	if m != nil {
		return m.CheckpointBuffer
	}
	return nil
}

type QueryLastNoAckRequest struct {
}

func (m *QueryLastNoAckRequest) Reset()         { *m = QueryLastNoAckRequest{} }
func (m *QueryLastNoAckRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastNoAckRequest) ProtoMessage()    {}
func (*QueryLastNoAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{8}
}
func (m *QueryLastNoAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastNoAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastNoAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastNoAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastNoAckRequest.Merge(m, src)
}
func (m *QueryLastNoAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastNoAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastNoAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastNoAckRequest proto.InternalMessageInfo

type QueryLastNoAckResponse struct {
	LastNoAck uint64 `protobuf:"varint,1,opt,name=last_no_ack,json=lastNoAck,proto3" json:"last_no_ack,omitempty"`
}

func (m *QueryLastNoAckResponse) Reset()         { *m = QueryLastNoAckResponse{} }
func (m *QueryLastNoAckResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastNoAckResponse) ProtoMessage()    {}
func (*QueryLastNoAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{9}
}
func (m *QueryLastNoAckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastNoAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastNoAckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastNoAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastNoAckResponse.Merge(m, src)
}
func (m *QueryLastNoAckResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastNoAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastNoAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastNoAckResponse proto.InternalMessageInfo

func (m *QueryLastNoAckResponse) GetLastNoAck() uint64 {
	if m != nil {
		return m.LastNoAck
	}
	return 0
}

type QueryCheckpointListRequest struct {
	Pagination *types.QueryPaginationParams `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCheckpointListRequest) Reset()         { *m = QueryCheckpointListRequest{} }
func (m *QueryCheckpointListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointListRequest) ProtoMessage()    {}
func (*QueryCheckpointListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{10}
}
func (m *QueryCheckpointListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointListRequest.Merge(m, src)
}
func (m *QueryCheckpointListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointListRequest proto.InternalMessageInfo

func (m *QueryCheckpointListRequest) GetPagination() *types.QueryPaginationParams {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryCheckpointListResponse struct {
	CheckpointList []*types.Checkpoint `protobuf:"bytes,1,rep,name=checkpoint_list,json=checkpointList,proto3" json:"checkpoint_list,omitempty"`
}

func (m *QueryCheckpointListResponse) Reset()         { *m = QueryCheckpointListResponse{} }
func (m *QueryCheckpointListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointListResponse) ProtoMessage()    {}
func (*QueryCheckpointListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{11}
}
func (m *QueryCheckpointListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointListResponse.Merge(m, src)
}
func (m *QueryCheckpointListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointListResponse proto.InternalMessageInfo

func (m *QueryCheckpointListResponse) GetCheckpointList() []*types.Checkpoint {
	if m != nil {
		return m.CheckpointList
	}
	return nil
}

type QueryNextCheckpointRequest struct {
	BorChainID string `protobuf:"bytes,1,opt,name=bor_chainID,json=borChainID,proto3" json:"bor_chainID,omitempty"`
}

func (m *QueryNextCheckpointRequest) Reset()         { *m = QueryNextCheckpointRequest{} }
func (m *QueryNextCheckpointRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextCheckpointRequest) ProtoMessage()    {}
func (*QueryNextCheckpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{12}
}
func (m *QueryNextCheckpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextCheckpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextCheckpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextCheckpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextCheckpointRequest.Merge(m, src)
}
func (m *QueryNextCheckpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextCheckpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextCheckpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextCheckpointRequest proto.InternalMessageInfo

type QueryNextCheckpointResponse struct {
	NextCheckpoint *MsgCheckpoint `protobuf:"bytes,1,opt,name=next_checkpoint,json=nextCheckpoint,proto3" json:"next_checkpoint,omitempty"`
}

func (m *QueryNextCheckpointResponse) Reset()         { *m = QueryNextCheckpointResponse{} }
func (m *QueryNextCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextCheckpointResponse) ProtoMessage()    {}
func (*QueryNextCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{13}
}
func (m *QueryNextCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextCheckpointResponse.Merge(m, src)
}
func (m *QueryNextCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextCheckpointResponse proto.InternalMessageInfo

func (m *QueryNextCheckpointResponse) GetNextCheckpoint() *MsgCheckpoint {
	if m != nil {
		return m.NextCheckpoint
	}
	return nil
}

// QueryBorChainID to queryBorChainID
type QueryBorChainID struct {
	BorChainID string `protobuf:"bytes,1,opt,name=bor_chainID,json=borChainID,proto3" json:"bor_chainID,omitempty"`
}

func (m *QueryBorChainID) Reset()         { *m = QueryBorChainID{} }
func (m *QueryBorChainID) String() string { return proto.CompactTextString(m) }
func (*QueryBorChainID) ProtoMessage()    {}
func (*QueryBorChainID) Descriptor() ([]byte, []int) {
	return fileDescriptor_d08e279aafedf8dd, []int{14}
}
func (m *QueryBorChainID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBorChainID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBorChainID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBorChainID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBorChainID.Merge(m, src)
}
func (m *QueryBorChainID) XXX_Size() int {
	return m.Size()
}
func (m *QueryBorChainID) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBorChainID.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBorChainID proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "heimdall.checkpoint.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "heimdall.checkpoint.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryAckCountRequest)(nil), "heimdall.checkpoint.v1beta1.QueryAckCountRequest")
	proto.RegisterType((*QueryAckCountResponse)(nil), "heimdall.checkpoint.v1beta1.QueryAckCountResponse")
	proto.RegisterType((*QueryCheckpointRequest)(nil), "heimdall.checkpoint.v1beta1.QueryCheckpointRequest")
	proto.RegisterType((*QueryCheckpointResponse)(nil), "heimdall.checkpoint.v1beta1.QueryCheckpointResponse")
	proto.RegisterType((*QueryCheckpointBufferRequest)(nil), "heimdall.checkpoint.v1beta1.QueryCheckpointBufferRequest")
	proto.RegisterType((*QueryCheckpointBufferResponse)(nil), "heimdall.checkpoint.v1beta1.QueryCheckpointBufferResponse")
	proto.RegisterType((*QueryLastNoAckRequest)(nil), "heimdall.checkpoint.v1beta1.QueryLastNoAckRequest")
	proto.RegisterType((*QueryLastNoAckResponse)(nil), "heimdall.checkpoint.v1beta1.QueryLastNoAckResponse")
	proto.RegisterType((*QueryCheckpointListRequest)(nil), "heimdall.checkpoint.v1beta1.QueryCheckpointListRequest")
	proto.RegisterType((*QueryCheckpointListResponse)(nil), "heimdall.checkpoint.v1beta1.QueryCheckpointListResponse")
	proto.RegisterType((*QueryNextCheckpointRequest)(nil), "heimdall.checkpoint.v1beta1.QueryNextCheckpointRequest")
	proto.RegisterType((*QueryNextCheckpointResponse)(nil), "heimdall.checkpoint.v1beta1.QueryNextCheckpointResponse")
	proto.RegisterType((*QueryBorChainID)(nil), "heimdall.checkpoint.v1beta1.QueryBorChainID")
}

func init() { proto.RegisterFile("checkpoint/v1beta/query.proto", fileDescriptor_d08e279aafedf8dd) }

var fileDescriptor_d08e279aafedf8dd = []byte{
	// 818 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x41, 0x4f, 0xdb, 0x48,
	0x14, 0x8e, 0x59, 0x36, 0x22, 0x0f, 0x09, 0xd8, 0x59, 0x16, 0x90, 0x03, 0xce, 0xca, 0x08, 0x69,
	0xb5, 0x2b, 0xc5, 0x24, 0x01, 0xc1, 0x66, 0xd9, 0x4a, 0x24, 0x54, 0xa8, 0x12, 0xa0, 0x36, 0xbd,
	0x54, 0xbd, 0x44, 0x63, 0x33, 0x38, 0x96, 0x13, 0x4f, 0xb0, 0x27, 0x2d, 0x5c, 0x7b, 0xea, 0xb1,
	0x52, 0x2f, 0x95, 0x7a, 0xe1, 0x0f, 0xf4, 0xd0, 0x4b, 0x7f, 0x40, 0x4f, 0xdc, 0x8a, 0xd4, 0x4b,
	0x4f, 0x55, 0x05, 0x3d, 0xf4, 0x67, 0x54, 0x19, 0x8f, 0x63, 0xc7, 0xa1, 0xc1, 0x69, 0x7b, 0x33,
	0x33, 0xef, 0x7b, 0xdf, 0xf7, 0xbd, 0x79, 0x7c, 0x00, 0x4b, 0x46, 0x83, 0x18, 0x76, 0x9b, 0x5a,
	0x0e, 0xd3, 0x1e, 0x15, 0x74, 0xc2, 0xb0, 0x76, 0xdc, 0x21, 0xee, 0x69, 0xbe, 0xed, 0x52, 0x46,
	0x51, 0xb6, 0x41, 0xac, 0xd6, 0x21, 0x6e, 0x36, 0xf3, 0x61, 0x5d, 0xde, 0xaf, 0x2b, 0xc8, 0xb9,
	0x41, 0xac, 0x49, 0x1c, 0xe2, 0x59, 0x9e, 0x8f, 0x96, 0xb3, 0x83, 0x05, 0x2d, 0xcf, 0x14, 0x97,
	0x8b, 0x26, 0xa5, 0x66, 0x93, 0x68, 0xb8, 0x6d, 0x69, 0xd8, 0x71, 0x28, 0xc3, 0xcc, 0xa2, 0x4e,
	0x00, 0x5d, 0x0c, 0x88, 0x35, 0x76, 0xda, 0x26, 0x9e, 0xd6, 0x20, 0xf8, 0x90, 0xb8, 0xc1, 0xad,
	0x1c, 0xbb, 0x8d, 0x48, 0x96, 0x67, 0x4d, 0x6a, 0x52, 0xfe, 0xa9, 0x75, 0xbf, 0xfc, 0x53, 0x75,
	0x16, 0xd0, 0xbd, 0x6e, 0xd1, 0x5d, 0xec, 0xe2, 0x96, 0x57, 0x23, 0xc7, 0x1d, 0xe2, 0x31, 0xf5,
	0x01, 0xfc, 0xde, 0x77, 0xea, 0xb5, 0xa9, 0xe3, 0x11, 0xb4, 0x0d, 0xe9, 0x36, 0x3f, 0x59, 0x90,
	0xfe, 0x94, 0xfe, 0x9a, 0x2c, 0x2e, 0xe7, 0x87, 0x8c, 0x21, 0xef, 0x83, 0x2b, 0xe3, 0xe7, 0x1f,
	0x73, 0xa9, 0x9a, 0x00, 0xaa, 0x73, 0x30, 0xcb, 0x3b, 0x6f, 0x1b, 0x76, 0x95, 0x76, 0x1c, 0x16,
	0x30, 0xae, 0xc1, 0x1f, 0xb1, 0x73, 0xc1, 0x99, 0x85, 0x0c, 0x36, 0xec, 0xba, 0xd1, 0x3d, 0xe4,
	0xb4, 0xe3, 0xb5, 0x09, 0x2c, 0x8a, 0xd4, 0x55, 0x98, 0xe3, 0xa8, 0x6a, 0x8f, 0x5d, 0xf4, 0x43,
	0x73, 0x90, 0x76, 0x3a, 0x2d, 0x9d, 0xb8, 0x02, 0x23, 0x7e, 0x52, 0x5d, 0x98, 0x1f, 0x40, 0x24,
	0x60, 0x42, 0x65, 0x80, 0xd0, 0xe2, 0xc2, 0x18, 0xb7, 0x2f, 0x87, 0xf6, 0xf9, 0xb8, 0xf3, 0x91,
	0xa6, 0x91, 0x6a, 0x55, 0x81, 0xc5, 0x18, 0x67, 0xa5, 0x73, 0x74, 0x44, 0xdc, 0xc0, 0x7b, 0x03,
	0x96, 0xbe, 0x71, 0x2f, 0x94, 0xed, 0xc2, 0x6f, 0x61, 0xbb, 0xba, 0xce, 0x2f, 0xc5, 0x13, 0x0c,
	0xd3, 0x30, 0x63, 0xc4, 0x1a, 0xaa, 0xf3, 0x62, 0xca, 0x7b, 0xd8, 0x63, 0x07, 0x74, 0xdb, 0xb0,
	0x03, 0x09, 0x9b, 0x62, 0x90, 0x91, 0x0b, 0xc1, 0xad, 0xc0, 0x64, 0x13, 0x7b, 0xac, 0xee, 0xd0,
	0x3a, 0x36, 0x6c, 0x31, 0x97, 0x4c, 0x33, 0xa8, 0x53, 0x0d, 0x90, 0x63, 0xe2, 0xf7, 0x2c, 0xaf,
	0xf7, 0x0c, 0xb7, 0x01, 0xda, 0xd8, 0xb4, 0x1c, 0xbe, 0xc3, 0x42, 0xf2, 0x4a, 0x5c, 0xb2, 0x58,
	0xb5, 0xa0, 0x4c, 0x2c, 0x5d, 0x04, 0xa8, 0xea, 0x90, 0xbd, 0x96, 0x44, 0x68, 0xac, 0xc2, 0x74,
	0x64, 0x3e, 0x4d, 0xcb, 0xeb, 0xbe, 0xdf, 0x2f, 0x37, 0x4c, 0x67, 0xca, 0xe8, 0x6b, 0xa6, 0xee,
	0x0a, 0x23, 0x07, 0xe4, 0x84, 0x0d, 0xee, 0x53, 0x0e, 0x26, 0x75, 0xea, 0xd6, 0x8d, 0x06, 0xb6,
	0x9c, 0x3b, 0x3b, 0xdc, 0x49, 0xa6, 0x06, 0x3a, 0x75, 0xab, 0xfe, 0x49, 0x79, 0xe2, 0xe9, 0x59,
	0x2e, 0xf5, 0xe5, 0x2c, 0x97, 0x52, 0x5d, 0x21, 0x36, 0xde, 0x48, 0x88, 0xbd, 0x0f, 0xd3, 0x0e,
	0x39, 0x61, 0xf5, 0xc8, 0x3a, 0xf9, 0x73, 0xf9, 0x7b, 0xe8, 0x6f, 0xd3, 0xbe, 0x67, 0x46, 0xc5,
	0x3b, 0x7d, 0xcd, 0xd5, 0x2d, 0x98, 0xe6, 0x9c, 0x95, 0x9e, 0xa0, 0x11, 0x14, 0x17, 0x5f, 0x02,
	0xfc, 0xca, 0xe1, 0xe8, 0x85, 0x04, 0x69, 0x7f, 0xfe, 0x48, 0x1b, 0x2a, 0x67, 0x30, 0x34, 0xe4,
	0xd5, 0xe4, 0x00, 0x7f, 0x14, 0xea, 0x3f, 0x4f, 0xde, 0x7f, 0x7e, 0x3e, 0xb6, 0x82, 0x96, 0xb5,
	0x5e, 0x6e, 0x0d, 0x24, 0x63, 0x41, 0xf3, 0x93, 0x03, 0xbd, 0x92, 0x60, 0x22, 0x48, 0x07, 0x54,
	0xb8, 0x99, 0x2b, 0x96, 0x30, 0x72, 0x71, 0x14, 0x88, 0x10, 0x58, 0xe6, 0x02, 0xd7, 0x50, 0x71,
	0xa8, 0x40, 0x11, 0xee, 0x1e, 0xc3, 0x8c, 0x68, 0xd8, 0xb0, 0x79, 0x82, 0xa0, 0x37, 0x12, 0x40,
	0xf8, 0x42, 0xa8, 0x74, 0x33, 0xfd, 0xc0, 0xd6, 0xc9, 0x6b, 0xa3, 0x81, 0x84, 0xea, 0xff, 0xb9,
	0xea, 0x0d, 0xb4, 0x9e, 0x5c, 0x75, 0x78, 0xef, 0xa1, 0x77, 0x12, 0xcc, 0xc4, 0xa3, 0x08, 0xfd,
	0x3b, 0x8a, 0x92, 0xbe, 0x78, 0x93, 0xcb, 0xdf, 0x03, 0x15, 0x56, 0x76, 0xb8, 0x95, 0x5b, 0x68,
	0x2b, 0xb9, 0x15, 0x3f, 0x1e, 0xc9, 0x61, 0x58, 0x87, 0x5e, 0x4b, 0x90, 0xe9, 0x25, 0x1b, 0x4a,
	0xb0, 0x08, 0xf1, 0x7c, 0x94, 0x4b, 0x23, 0x61, 0x84, 0xf8, 0xff, 0xb8, 0xf8, 0x75, 0x54, 0x4a,
	0x2e, 0xbe, 0x9b, 0xab, 0x0e, 0xc5, 0x86, 0x8d, 0xde, 0x4a, 0x30, 0xd5, 0x1f, 0x77, 0x68, 0x63,
	0x94, 0x41, 0x46, 0x52, 0x58, 0xde, 0x1c, 0x1d, 0xf8, 0x73, 0x56, 0xa9, 0x6b, 0xa2, 0x3f, 0x06,
	0x93, 0x98, 0xb8, 0x36, 0x81, 0x93, 0x98, 0xb8, 0x3e, 0x71, 0x7f, 0xd0, 0x44, 0x65, 0xff, 0xfc,
	0x52, 0x91, 0x2e, 0x2e, 0x15, 0xe9, 0xd3, 0xa5, 0x22, 0x3d, 0xbb, 0x52, 0x52, 0x17, 0x57, 0x4a,
	0xea, 0xc3, 0x95, 0x92, 0x7a, 0x58, 0x32, 0x2d, 0xd6, 0xe8, 0xe8, 0x79, 0x83, 0xb6, 0xb4, 0x16,
	0x66, 0x96, 0xe1, 0x10, 0xf6, 0x98, 0xba, 0x76, 0xc8, 0x73, 0x12, 0x65, 0xe2, 0x7f, 0x82, 0xf4,
	0x34, 0xff, 0xc7, 0xab, 0xf4, 0x35, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x67, 0xe7, 0x48, 0x62, 0x0a,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the staking parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// AckCount queries the AckCount.
	AckCount(ctx context.Context, in *QueryAckCountRequest, opts ...grpc.CallOption) (*QueryAckCountResponse, error)
	// Checkpoint queries the checkpoint.
	Checkpoint(ctx context.Context, in *QueryCheckpointRequest, opts ...grpc.CallOption) (*QueryCheckpointResponse, error)
	// CheckpointBuffe queries the Checkpoint Buffer.
	CheckpointBuffer(ctx context.Context, in *QueryCheckpointBufferRequest, opts ...grpc.CallOption) (*QueryCheckpointBufferResponse, error)
	// LastNoAck queries the last no-ack.
	LastNoAck(ctx context.Context, in *QueryLastNoAckRequest, opts ...grpc.CallOption) (*QueryLastNoAckResponse, error)
	// CheckpointList queries chepoing list .
	CheckpointList(ctx context.Context, in *QueryCheckpointListRequest, opts ...grpc.CallOption) (*QueryCheckpointListResponse, error)
	// NextCheckpoint queries the next checkpoint.
	NextCheckpoint(ctx context.Context, in *QueryNextCheckpointRequest, opts ...grpc.CallOption) (*QueryNextCheckpointResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/heimdall.checkpoint.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AckCount(ctx context.Context, in *QueryAckCountRequest, opts ...grpc.CallOption) (*QueryAckCountResponse, error) {
	out := new(QueryAckCountResponse)
	err := c.cc.Invoke(ctx, "/heimdall.checkpoint.v1beta1.Query/AckCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Checkpoint(ctx context.Context, in *QueryCheckpointRequest, opts ...grpc.CallOption) (*QueryCheckpointResponse, error) {
	out := new(QueryCheckpointResponse)
	err := c.cc.Invoke(ctx, "/heimdall.checkpoint.v1beta1.Query/Checkpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckpointBuffer(ctx context.Context, in *QueryCheckpointBufferRequest, opts ...grpc.CallOption) (*QueryCheckpointBufferResponse, error) {
	out := new(QueryCheckpointBufferResponse)
	err := c.cc.Invoke(ctx, "/heimdall.checkpoint.v1beta1.Query/CheckpointBuffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastNoAck(ctx context.Context, in *QueryLastNoAckRequest, opts ...grpc.CallOption) (*QueryLastNoAckResponse, error) {
	out := new(QueryLastNoAckResponse)
	err := c.cc.Invoke(ctx, "/heimdall.checkpoint.v1beta1.Query/LastNoAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckpointList(ctx context.Context, in *QueryCheckpointListRequest, opts ...grpc.CallOption) (*QueryCheckpointListResponse, error) {
	out := new(QueryCheckpointListResponse)
	err := c.cc.Invoke(ctx, "/heimdall.checkpoint.v1beta1.Query/CheckpointList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextCheckpoint(ctx context.Context, in *QueryNextCheckpointRequest, opts ...grpc.CallOption) (*QueryNextCheckpointResponse, error) {
	out := new(QueryNextCheckpointResponse)
	err := c.cc.Invoke(ctx, "/heimdall.checkpoint.v1beta1.Query/NextCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the staking parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// AckCount queries the AckCount.
	AckCount(context.Context, *QueryAckCountRequest) (*QueryAckCountResponse, error)
	// Checkpoint queries the checkpoint.
	Checkpoint(context.Context, *QueryCheckpointRequest) (*QueryCheckpointResponse, error)
	// CheckpointBuffe queries the Checkpoint Buffer.
	CheckpointBuffer(context.Context, *QueryCheckpointBufferRequest) (*QueryCheckpointBufferResponse, error)
	// LastNoAck queries the last no-ack.
	LastNoAck(context.Context, *QueryLastNoAckRequest) (*QueryLastNoAckResponse, error)
	// CheckpointList queries chepoing list .
	CheckpointList(context.Context, *QueryCheckpointListRequest) (*QueryCheckpointListResponse, error)
	// NextCheckpoint queries the next checkpoint.
	NextCheckpoint(context.Context, *QueryNextCheckpointRequest) (*QueryNextCheckpointResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AckCount(ctx context.Context, req *QueryAckCountRequest) (*QueryAckCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckCount not implemented")
}
func (*UnimplementedQueryServer) Checkpoint(ctx context.Context, req *QueryCheckpointRequest) (*QueryCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkpoint not implemented")
}
func (*UnimplementedQueryServer) CheckpointBuffer(ctx context.Context, req *QueryCheckpointBufferRequest) (*QueryCheckpointBufferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckpointBuffer not implemented")
}
func (*UnimplementedQueryServer) LastNoAck(ctx context.Context, req *QueryLastNoAckRequest) (*QueryLastNoAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastNoAck not implemented")
}
func (*UnimplementedQueryServer) CheckpointList(ctx context.Context, req *QueryCheckpointListRequest) (*QueryCheckpointListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckpointList not implemented")
}
func (*UnimplementedQueryServer) NextCheckpoint(ctx context.Context, req *QueryNextCheckpointRequest) (*QueryNextCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextCheckpoint not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.checkpoint.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AckCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAckCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AckCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.checkpoint.v1beta1.Query/AckCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AckCount(ctx, req.(*QueryAckCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Checkpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Checkpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.checkpoint.v1beta1.Query/Checkpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Checkpoint(ctx, req.(*QueryCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckpointBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointBufferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckpointBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.checkpoint.v1beta1.Query/CheckpointBuffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckpointBuffer(ctx, req.(*QueryCheckpointBufferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastNoAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastNoAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastNoAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.checkpoint.v1beta1.Query/LastNoAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastNoAck(ctx, req.(*QueryLastNoAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckpointList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckpointList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.checkpoint.v1beta1.Query/CheckpointList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckpointList(ctx, req.(*QueryCheckpointListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.checkpoint.v1beta1.Query/NextCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextCheckpoint(ctx, req.(*QueryNextCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdall.checkpoint.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AckCount",
			Handler:    _Query_AckCount_Handler,
		},
		{
			MethodName: "Checkpoint",
			Handler:    _Query_Checkpoint_Handler,
		},
		{
			MethodName: "CheckpointBuffer",
			Handler:    _Query_CheckpointBuffer_Handler,
		},
		{
			MethodName: "LastNoAck",
			Handler:    _Query_LastNoAck_Handler,
		},
		{
			MethodName: "CheckpointList",
			Handler:    _Query_CheckpointList_Handler,
		},
		{
			MethodName: "NextCheckpoint",
			Handler:    _Query_NextCheckpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checkpoint/v1beta/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAckCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAckCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAckCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAckCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAckCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAckCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Checkpoint != nil {
		{
			size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AckCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointBufferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointBufferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointBufferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointBufferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointBufferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointBufferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckpointBuffer != nil {
		{
			size, err := m.CheckpointBuffer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastNoAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastNoAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastNoAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastNoAckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastNoAckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastNoAckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastNoAck != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastNoAck))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CheckpointList) > 0 {
		for iNdEx := len(m.CheckpointList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CheckpointList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextCheckpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextCheckpointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextCheckpointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorChainID) > 0 {
		i -= len(m.BorChainID)
		copy(dAtA[i:], m.BorChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BorChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextCheckpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextCheckpoint != nil {
		{
			size, err := m.NextCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBorChainID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBorChainID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBorChainID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorChainID) > 0 {
		i -= len(m.BorChainID)
		copy(dAtA[i:], m.BorChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BorChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAckCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAckCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckCount != 0 {
		n += 1 + sovQuery(uint64(m.AckCount))
	}
	return n
}

func (m *QueryCheckpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovQuery(uint64(m.Number))
	}
	return n
}

func (m *QueryCheckpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckCount != 0 {
		n += 1 + sovQuery(uint64(m.AckCount))
	}
	if m.Checkpoint != nil {
		l = m.Checkpoint.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckpointBufferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCheckpointBufferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckpointBuffer != nil {
		l = m.CheckpointBuffer.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastNoAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastNoAckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastNoAck != 0 {
		n += 1 + sovQuery(uint64(m.LastNoAck))
	}
	return n
}

func (m *QueryCheckpointListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckpointListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CheckpointList) > 0 {
		for _, e := range m.CheckpointList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryNextCheckpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BorChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextCheckpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextCheckpoint != nil {
		l = m.NextCheckpoint.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBorChainID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BorChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAckCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAckCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAckCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAckCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAckCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAckCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckCount", wireType)
			}
			m.AckCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckCount", wireType)
			}
			m.AckCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkpoint == nil {
				m.Checkpoint = &types.Checkpoint{}
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointBufferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointBufferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointBufferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointBufferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointBufferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointBufferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointBuffer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckpointBuffer == nil {
				m.CheckpointBuffer = &types.Checkpoint{}
			}
			if err := m.CheckpointBuffer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastNoAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastNoAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastNoAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastNoAckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastNoAckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastNoAckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastNoAck", wireType)
			}
			m.LastNoAck = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastNoAck |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &types.QueryPaginationParams{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckpointList = append(m.CheckpointList, &types.Checkpoint{})
			if err := m.CheckpointList[len(m.CheckpointList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextCheckpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextCheckpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextCheckpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextCheckpoint == nil {
				m.NextCheckpoint = &MsgCheckpoint{}
			}
			if err := m.NextCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBorChainID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBorChainID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBorChainID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
