syntax = "proto3";

package heimdall.types;

import "gogoproto/gogo.proto";

option go_package = "github.com/maticnetwork/heimdall/types";

option (gogoproto.sizer_all)       = true;
option (gogoproto.marshaler_all)   = true;
option (gogoproto.unmarshaler_all) = true;

message ValidatorSet {
    option (gogoproto.goproto_getters)  = false;
    option (gogoproto.goproto_stringer) = false;

    repeated Validator validators         = 1;
    Validator          proposer           = 2;
    int64              total_voting_power = 3
        [(gogoproto.moretags) = "yaml:\"total_voting_power\""];
}

message Validator {
    option (gogoproto.goproto_getters)  = false;
    option (gogoproto.goproto_stringer) = false;

    ValidatorID ID          = 1;
    uint64      start_epoch = 2 [(gogoproto.moretags) = "yaml:\"start_epoch\""];
    uint64      end_epoch   = 3 [(gogoproto.moretags) = "yaml:\"end_epoch\""];
    uint64      nonce       = 4;
    int64  voting_power = 5 [(gogoproto.moretags) = "yaml:\"voting_power\""];
    string pub_key      = 6 [(gogoproto.moretags) = "yaml:\"pub_key\""];
    string signer       = 7;
    string last_updated = 8 [(gogoproto.moretags) = "yaml:\"last_updated\""];
    bool   jailed       = 9;
    int64  proposer_priority = 10
        [(gogoproto.moretags) = "yaml:\"proposer_priority\""];
}

enum ValidatorID {
    DEFAULT                                  = 0;
    option (gogoproto.goproto_enum_stringer) = false;
    option (gogoproto.goproto_enum_prefix)   = false;
}

message MinimalVal {
    option (gogoproto.goproto_getters) = false;

    ValidatorID ID      = 1;
    uint64 voting_power = 2 [(gogoproto.moretags) = "yaml:\"voting_power\""];
    string signer       = 3;
}
