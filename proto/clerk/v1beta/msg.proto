syntax = "proto3";
package heimdall.clerk.v1beta1;

import "gogoproto/gogo.proto";
// import "google/protobuf/any.proto";
// import "google/protobuf/duration.proto";

option go_package = "github.com/maticnetwork/heimdall/x/clerk/types";

option (gogoproto.sizer_all)       = false;
option (gogoproto.marshaler_all)   = false;
option (gogoproto.unmarshaler_all) = false;

// Msg defines the staking Msg service.
service Msg {
    // MsgEventRecord defines a method to join a new event record.
    rpc MsgEventRecord(MsgEventRecordRequest) returns (MsgEventRecordResponse);
}

message MsgEventRecordRequest {
    option (gogoproto.goproto_getters) = false;
    string from                        = 1 [(gogoproto.casttype) =
                         "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    string tx_hash                     = 2
        [(gogoproto.casttype) =
             "github.com/maticnetwork/heimdall/types/common.HeimdallHash"];
    uint64 log_index        = 3;
    uint64 block_number     = 4;
    string contract_address = 5
        [(gogoproto.casttype) =
             "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    bytes  data     = 6;
    uint64 id       = 7;
    string chain_id = 8;
}

// MsgEventRecordResponse defines MsgEventRecord response type.
message MsgEventRecordResponse {}
