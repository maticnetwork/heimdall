syntax = "proto3";
package heimdall.bor.v1beta1;

import "gogoproto/gogo.proto";
import "heimdall/types/span.proto";
import "heimdall/types/query.proto";
import "heimdall/types/validator.proto";


option go_package = "github.com/maticnetwork/heimdall/x/bor/types";
option (gogoproto.sizer_all)       = true;
option (gogoproto.marshaler_all)   = true;
option (gogoproto.unmarshaler_all) = true;

service Query {
    rpc Param(QueryParamRequest) returns (QueryParamResponse) {};

    rpc Span(QuerySpanRequest) returns (QuerySpanResponse) {};

    rpc SpanList(QuerySpanListRequest) returns (QuerySpanListResponse) {}

    rpc LatestSpan(QueryLatestSpanRequest) returns (QueryLatestSpanResponse) {}

    rpc NextProducers(QueryNextProducersRequest)
        returns (QueryNextProducersResponse) {}

    rpc NextSpanSeed(QueryNextSpanSeedRequest)
        returns (QueryNextSpanSeedResponse) {}
}

// params
message QueryParamRequest {
    string params_type = 1;
}
message QueryParamResponse {
    oneof params {
        uint64 span_duration = 1;
        uint64 latest_eth_block = 2;
        uint64 producer_count = 3;
        uint64 sprint = 4;
    }
}

// span
message QuerySpanRequest {
    uint64 record_id = 1 [(gogoproto.moretags) = "yaml:\"record_id\""];
}
message QuerySpanResponse {
    heimdall.types.Span Span = 1;
}

// span list
message QuerySpanListRequest {
    heimdall.types.QueryPaginationParams pagination = 1;
}
message QuerySpanListResponse {
    repeated heimdall.types.Span Spans = 1;
}

// latest span
message QueryLatestSpanRequest {}

message QueryLatestSpanResponse {
    heimdall.types.Span Span = 1;
}

// QueryNextProducers
message QueryNextProducersRequest {}
message QueryNextProducersResponse {
    repeated heimdall.types.Validator next_producers = 1  [(gogoproto.nullable) = false];
}

// QueryNextSpanSeed
message QueryNextSpanSeedRequest {}
message QueryNextSpanSeedResponse {
    string next_span_seed = 1;
}