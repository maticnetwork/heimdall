syntax = "proto3";
package heimdall.checkpoint.v1beta1;

import "gogoproto/gogo.proto";

option go_package = "github.com/maticnetwork/heimdall/x/checkpoint/types";

option (gogoproto.sizer_all)       = true;
option (gogoproto.marshaler_all)   = true;
option (gogoproto.unmarshaler_all) = true;

// Msg defines the checkpoing Msg service.
service Msg {
  // Checkpoint defines Checkpoint.
  rpc Checkpoint(MsgCheckpoint) returns (MsgCheckpointResponse);

  // CheckpointAck defines ack to checkpoint
  rpc CheckpointAck(MsgCheckpointAck) returns (MsgCheckpointAckResponse);

  // CheckpointNoAck defines no ack to checkpoint
  rpc CheckpointNoAck(MsgCheckpointNoAck) returns (MsgCheckpointNoAckResponse);

}

// MsgCheckpoint defines a message to crete checkpoint.
message MsgCheckpoint {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string proposer = 1;
  uint64 start_block = 2;
  uint64 end_block = 3;
  bytes root_hash = 4;
  bytes account_root_hash = 5;
  string bor_chainID = 6;
}

// MsgValidatorJoinResponse defines ValidatorJoin response type.
message MsgCheckpointResponse{}

// MsgCheckpoint defines a message to checkpoint ack.
message MsgCheckpointAck {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;
  
  string from = 1;
  uint64 number = 2;
  string proposer = 3;
  uint64 start_block = 4;
  uint64 end_block = 5;
  string root_hash = 6;
  string tx_hash = 7;
  uint64 log_index = 8;
}

// MsgCheckpointAckResponse defines CheckpointAck response type.
message MsgCheckpointAckResponse {}

// MsgCheckpoint defines a message to checkpoint no ack.
message MsgCheckpointNoAck {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string from = 1;
}

// MsgCheckpointNoAckResponse defines CheckpointNoAck response type.
message MsgCheckpointNoAckResponse {}
